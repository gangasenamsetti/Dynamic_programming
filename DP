//DP problems can be solved using tabulation and memoization
//tabulation--->bottom up
//memoization--->top down(recursion)
//DP--->Dividing the entire problem into sub problem and solving each sub problem and storing in DP array

//Nth FABINOCCII number using DP using memoization
#include <bits/stdc++.h>
using namespace std;
int fib(int n,vector<int>dp){
    if(n<=1) return n;
    if(dp[n]!=-1) return dp[n];
    return dp[n]=fib(n-1,dp)+fib(n-2,dp);
}
int main() {
    int n;
    cin>>n;
    vector<int>dp(n+1,-1);
    cout<<fib(n,dp);
    return 0;
}


//Nth fabinocii number using DP using tabulation
#include <bits/stdc++.h>
using namespace std;
int fib(int n){
    vector<int>dp(n+1,-1);
    dp[0] = 0;
    dp[1] = 1;
    for (int i = 2; i <= n; i++)
        dp[i] = dp[i - 1] + dp[i - 2];
    return dp[n];
}
int main() {
    int n;
    cin>>n;
    vector<int>dp(n+1,-1);
    cout<<fib(n);
    return 0;
} //0 1 2 3 5 8 13

